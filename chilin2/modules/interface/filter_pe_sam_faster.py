#!/usr/bin/env python

"""
The Stringent version, use to collect high quality proper paired reads, should be even number.
based on pair_reads_statistics_recollect_stringent.py to filter SAM files
add standards: exclude 97 and 145 those are the same coordinates,
               add insert size

"""

import sys
import linecache

if len(sys.argv) < 2:
    print(__doc__)
    sys.exit(1)


sam = sys.argv[1]

def pass_criteria(l, insert):
    """
    high quality paired mapped reads should be
    add insert size standards
    flag: 2, to kick out weird (no 4, no 8)
    both have mapping quality >= 1
    input: list, [[(pair1_flag, pair1_quality), (pair2)],  [another...]]
    """
    ## l[0] pair1_flag, pair2_quality
    ## l[1] pair1_flag, pair2_quality
    ## stringent pass standard
    proper_pairf = lambda x: 2 in map(int, bit_flag(x)) and not 4 in map(int, bit_flag(x)) and not 8 in map(int, bit_flag(x))
    return all([int(l[0][1]) >= 1, int(l[1][1]) >= 1, 0 < abs(int(l[0][2])) < insert, 0 < abs(int(l[1][2])) < insert,proper_pairf(int(l[0][0])), proper_pairf(int(l[1][0]))])


def flag2table(sam):
    """
    convert SAM to FLAG => Freq
    """

    map_table = {}
    map_table["flag"] = []
    map_table["mapq"] = []
## open SAM and generate flag => frequency, mapq => freq
    n = 0
    ##pairs_table = [] ## only scan file once
    pairs_table_index = []
    pair1 = []
    pair2 = []
    list_index = 0
    fout = open(sam+"_PE.sam", "w")
    proper = 0
## only scan files once
    with open(sam, "r") as inf:
        for line in inf:
            if line.startswith("@"):
                n = 0
                fout.write(line)
                continue
            n += 1
            lines = line.strip().split()
            ## [(pair1_flag, pair1_quality, pair2..)]
            if n%2 == 1:
                # line[1]: flag, line[4]: mapq, line[8]: insert size
                pair1 = (lines[1], lines[4], lines[8], line)
            elif n%2 == 0:
                pair2 = (lines[1], lines[4], lines[8], line)
                if pass_criteria([pair1, pair2], 1000):
                    proper += 1
                    fout.write(pair1[3])
                    fout.write(pair2[3])
    fout.close()

    print "\t".join(["high quality proper pairs"])
    print "\t".join([str(proper), str(n*2)])

def bit_flag(bit):
    TABLE= \
{0: ' 0 ',
1:' 1 ',
2:' 2 ',
3:' 1 '' 2 ',
4:' 4 ',
5:' 1 '' 4 ',
6:' 2 '' 4 ',
7:' 1 '' 2 '' 4 ',
8:' 8 ',
9:' 1 '' 8 ',
10:' 2 '' 8 ',
11:' 1 '' 2 '' 8 ',
12:' 4 '' 8 ',
13:' 1 '' 4 '' 8 ',
14:' 2 '' 4 '' 8 ',
15:' 1 '' 2 '' 4 '' 8 ',
16:' 16 ',
17:' 1 '' 16 ',
18:' 2 '' 16 ',
19:' 1 '' 2 '' 16 ',
20:' 4 '' 16 ',
21:' 1 '' 4 '' 16 ',
22:' 2 '' 4 '' 16 ',
23:' 1 '' 2 '' 4 '' 16 ',
24:' 8 '' 16 ',
25:' 1 '' 8 '' 16 ',
26:' 2 '' 8 '' 16 ',
27:' 1 '' 2 '' 8 '' 16 ',
28:' 4 '' 8 '' 16 ',
29:' 1 '' 4 '' 8 '' 16 ',
30:' 2 '' 4 '' 8 '' 16 ',
31:' 1 '' 2 '' 4 '' 8 '' 16 ',
32:' 32 ',
33:' 1 '' 32 ',
34:' 2 '' 32 ',
35:' 1 '' 2 '' 32 ',
36:' 4 '' 32 ',
37:' 1 '' 4 '' 32 ',
38:' 2 '' 4 '' 32 ',
39:' 1 '' 2 '' 4 '' 32 ',
40:' 8 '' 32 ',
41:' 1 '' 8 '' 32 ',
42:' 2 '' 8 '' 32 ',
43:' 1 '' 2 '' 8 '' 32 ',
44:' 4 '' 8 '' 32 ',
45:' 1 '' 4 '' 8 '' 32 ',
46:' 2 '' 4 '' 8 '' 32 ',
47:' 1 '' 2 '' 4 '' 8 '' 32 ',
48:' 16 '' 32 ',
49:' 1 '' 16 '' 32 ',
50:' 2 '' 16 '' 32 ',
51:' 1 '' 2 '' 16 '' 32 ',
52:' 4 '' 16 '' 32 ',
53:' 1 '' 4 '' 16 '' 32 ',
54:' 2 '' 4 '' 16 '' 32 ',
55:' 1 '' 2 '' 4 '' 16 '' 32 ',
56:' 8 '' 16 '' 32 ',
57:' 1 '' 8 '' 16 '' 32 ',
58:' 2 '' 8 '' 16 '' 32 ',
59:' 1 '' 2 '' 8 '' 16 '' 32 ',
60:' 4 '' 8 '' 16 '' 32 ',
61:' 1 '' 4 '' 8 '' 16 '' 32 ',
62:' 2 '' 4 '' 8 '' 16 '' 32 ',
63:' 1 '' 2 '' 4 '' 8 '' 16 '' 32 ',
64:' 64 ',
65:' 1 '' 64 ',
66:' 2 '' 64 ',
67:' 1 '' 2 '' 64 ',
68:' 4 '' 64 ',
69:' 1 '' 4 '' 64 ',
70:' 2 '' 4 '' 64 ',
71:' 1 '' 2 '' 4 '' 64 ',
72:' 8 '' 64 ',
73:' 1 '' 8 '' 64 ',
74:' 2 '' 8 '' 64 ',
75:' 1 '' 2 '' 8 '' 64 ',
76:' 4 '' 8 '' 64 ',
77:' 1 '' 4 '' 8 '' 64 ',
78:' 2 '' 4 '' 8 '' 64 ',
79:' 1 '' 2 '' 4 '' 8 '' 64 ',
80:' 16 '' 64 ',
81:' 1 '' 16 '' 64 ',
82:' 2 '' 16 '' 64 ',
83:' 1 '' 2 '' 16 '' 64 ',
84:' 4 '' 16 '' 64 ',
85:' 1 '' 4 '' 16 '' 64 ',
86:' 2 '' 4 '' 16 '' 64 ',
87:' 1 '' 2 '' 4 '' 16 '' 64 ',
88:' 8 '' 16 '' 64 ',
89:' 1 '' 8 '' 16 '' 64 ',
90:' 2 '' 8 '' 16 '' 64 ',
91:' 1 '' 2 '' 8 '' 16 '' 64 ',
92:' 4 '' 8 '' 16 '' 64 ',
93:' 1 '' 4 '' 8 '' 16 '' 64 ',
94:' 2 '' 4 '' 8 '' 16 '' 64 ',
95:' 1 '' 2 '' 4 '' 8 '' 16 '' 64 ',
96:' 32 '' 64 ',
97:' 1 '' 32 '' 64 ',
98:' 2 '' 32 '' 64 ',
99:' 1 '' 2 '' 32 '' 64 ',
100:' 4 '' 32 '' 64 ',
101:' 1 '' 4 '' 32 '' 64 ',
102:' 2 '' 4 '' 32 '' 64 ',
103:' 1 '' 2 '' 4 '' 32 '' 64 ',
104:' 8 '' 32 '' 64 ',
105:' 1 '' 8 '' 32 '' 64 ',
106:' 2 '' 8 '' 32 '' 64 ',
107:' 1 '' 2 '' 8 '' 32 '' 64 ',
108:' 4 '' 8 '' 32 '' 64 ',
109:' 1 '' 4 '' 8 '' 32 '' 64 ',
110:' 2 '' 4 '' 8 '' 32 '' 64 ',
111:' 1 '' 2 '' 4 '' 8 '' 32 '' 64 ',
112:' 16 '' 32 '' 64 ',
113:' 1 '' 16 '' 32 '' 64 ',
114:' 2 '' 16 '' 32 '' 64 ',
115:' 1 '' 2 '' 16 '' 32 '' 64 ',
116:' 4 '' 16 '' 32 '' 64 ',
117:' 1 '' 4 '' 16 '' 32 '' 64 ',
118:' 2 '' 4 '' 16 '' 32 '' 64 ',
119:' 1 '' 2 '' 4 '' 16 '' 32 '' 64 ',
120:' 8 '' 16 '' 32 '' 64 ',
121:' 1 '' 8 '' 16 '' 32 '' 64 ',
122:' 2 '' 8 '' 16 '' 32 '' 64 ',
123:' 1 '' 2 '' 8 '' 16 '' 32 '' 64 ',
124:' 4 '' 8 '' 16 '' 32 '' 64 ',
125:' 1 '' 4 '' 8 '' 16 '' 32 '' 64 ',
126:' 2 '' 4 '' 8 '' 16 '' 32 '' 64 ',
127:' 1 '' 2 '' 4 '' 8 '' 16 '' 32 '' 64 ',
128:' 128 ',
129:' 1 '' 128 ',
130:' 2 '' 128 ',
131:' 1 '' 2 '' 128 ',
132:' 4 '' 128 ',
133:' 1 '' 4 '' 128 ',
134:' 2 '' 4 '' 128 ',
135:' 1 '' 2 '' 4 '' 128 ',
136:' 8 '' 128 ',
137:' 1 '' 8 '' 128 ',
138:' 2 '' 8 '' 128 ',
139:' 1 '' 2 '' 8 '' 128 ',
140:' 4 '' 8 '' 128 ',
141:' 1 '' 4 '' 8 '' 128 ',
142:' 2 '' 4 '' 8 '' 128 ',
143:' 1 '' 2 '' 4 '' 8 '' 128 ',
144:' 16 '' 128 ',
145:' 1 '' 16 '' 128 ',
146:' 2 '' 16 '' 128 ',
147:' 1 '' 2 '' 16 '' 128 ',
148:' 4 '' 16 '' 128 ',
149:' 1 '' 4 '' 16 '' 128 ',
150:' 2 '' 4 '' 16 '' 128 ',
151:' 1 '' 2 '' 4 '' 16 '' 128 ',
152:' 8 '' 16 '' 128 ',
153:' 1 '' 8 '' 16 '' 128 ',
154:' 2 '' 8 '' 16 '' 128 ',
155:' 1 '' 2 '' 8 '' 16 '' 128 ',
156:' 4 '' 8 '' 16 '' 128 ',
157:' 1 '' 4 '' 8 '' 16 '' 128 ',
158:' 2 '' 4 '' 8 '' 16 '' 128 ',
159:' 1 '' 2 '' 4 '' 8 '' 16 '' 128 ',
160:' 32 '' 128 ',
161:' 1 '' 32 '' 128 ',
162:' 2 '' 32 '' 128 ',
163:' 1 '' 2 '' 32 '' 128 ',
164:' 4 '' 32 '' 128 ',
165:' 1 '' 4 '' 32 '' 128 ',
166:' 2 '' 4 '' 32 '' 128 ',
167:' 1 '' 2 '' 4 '' 32 '' 128 ',
168:' 8 '' 32 '' 128 ',
169:' 1 '' 8 '' 32 '' 128 ',
170:' 2 '' 8 '' 32 '' 128 ',
171:' 1 '' 2 '' 8 '' 32 '' 128 ',
172:' 4 '' 8 '' 32 '' 128 ',
173:' 1 '' 4 '' 8 '' 32 '' 128 ',
174:' 2 '' 4 '' 8 '' 32 '' 128 ',
175:' 1 '' 2 '' 4 '' 8 '' 32 '' 128 ',
176:' 16 '' 32 '' 128 ',
177:' 1 '' 16 '' 32 '' 128 ',
178:' 2 '' 16 '' 32 '' 128 ',
179:' 1 '' 2 '' 16 '' 32 '' 128 ',
180:' 4 '' 16 '' 32 '' 128 ',
181:' 1 '' 4 '' 16 '' 32 '' 128 ',
182:' 2 '' 4 '' 16 '' 32 '' 128 ',
183:' 1 '' 2 '' 4 '' 16 '' 32 '' 128 ',
184:' 8 '' 16 '' 32 '' 128 ',
185:' 1 '' 8 '' 16 '' 32 '' 128 ',
186:' 2 '' 8 '' 16 '' 32 '' 128 ',
187:' 1 '' 2 '' 8 '' 16 '' 32 '' 128 ',
188:' 4 '' 8 '' 16 '' 32 '' 128 ',
189:' 1 '' 4 '' 8 '' 16 '' 32 '' 128 ',
190:' 2 '' 4 '' 8 '' 16 '' 32 '' 128 ',
191:' 1 '' 2 '' 4 '' 8 '' 16 '' 32 '' 128 ',
192:' 64 '' 128 ',
193:' 1 '' 64 '' 128 ',
194:' 2 '' 64 '' 128 ',
195:' 1 '' 2 '' 64 '' 128 ',
196:' 4 '' 64 '' 128 ',
197:' 1 '' 4 '' 64 '' 128 ',
198:' 2 '' 4 '' 64 '' 128 ',
199:' 1 '' 2 '' 4 '' 64 '' 128 ',
200:' 8 '' 64 '' 128 ',
201:' 1 '' 8 '' 64 '' 128 ',
202:' 2 '' 8 '' 64 '' 128 ',
203:' 1 '' 2 '' 8 '' 64 '' 128 ',
204:' 4 '' 8 '' 64 '' 128 ',
205:' 1 '' 4 '' 8 '' 64 '' 128 ',
206:' 2 '' 4 '' 8 '' 64 '' 128 ',
207:' 1 '' 2 '' 4 '' 8 '' 64 '' 128 ',
208:' 16 '' 64 '' 128 ',
209:' 1 '' 16 '' 64 '' 128 ',
210:' 2 '' 16 '' 64 '' 128 ',
211:' 1 '' 2 '' 16 '' 64 '' 128 ',
212:' 4 '' 16 '' 64 '' 128 ',
213:' 1 '' 4 '' 16 '' 64 '' 128 ',
214:' 2 '' 4 '' 16 '' 64 '' 128 ',
215:' 1 '' 2 '' 4 '' 16 '' 64 '' 128 ',
216:' 8 '' 16 '' 64 '' 128 ',
217:' 1 '' 8 '' 16 '' 64 '' 128 ',
218:' 2 '' 8 '' 16 '' 64 '' 128 ',
219:' 1 '' 2 '' 8 '' 16 '' 64 '' 128 ',
220:' 4 '' 8 '' 16 '' 64 '' 128 ',
221:' 1 '' 4 '' 8 '' 16 '' 64 '' 128 ',
222:' 2 '' 4 '' 8 '' 16 '' 64 '' 128 ',
223:' 1 '' 2 '' 4 '' 8 '' 16 '' 64 '' 128 ',
224:' 32 '' 64 '' 128 ',
225:' 1 '' 32 '' 64 '' 128 ',
226:' 2 '' 32 '' 64 '' 128 ',
227:' 1 '' 2 '' 32 '' 64 '' 128 ',
228:' 4 '' 32 '' 64 '' 128 ',
229:' 1 '' 4 '' 32 '' 64 '' 128 ',
230:' 2 '' 4 '' 32 '' 64 '' 128 ',
231:' 1 '' 2 '' 4 '' 32 '' 64 '' 128 ',
232:' 8 '' 32 '' 64 '' 128 ',
233:' 1 '' 8 '' 32 '' 64 '' 128 ',
234:' 2 '' 8 '' 32 '' 64 '' 128 ',
235:' 1 '' 2 '' 8 '' 32 '' 64 '' 128 ',
236:' 4 '' 8 '' 32 '' 64 '' 128 ',
237:' 1 '' 4 '' 8 '' 32 '' 64 '' 128 ',
238:' 2 '' 4 '' 8 '' 32 '' 64 '' 128 ',
239:' 1 '' 2 '' 4 '' 8 '' 32 '' 64 '' 128 ',
240:' 16 '' 32 '' 64 '' 128 ',
241:' 1 '' 16 '' 32 '' 64 '' 128 ',
242:' 2 '' 16 '' 32 '' 64 '' 128 ',
243:' 1 '' 2 '' 16 '' 32 '' 64 '' 128 ',
244:' 4 '' 16 '' 32 '' 64 '' 128 ',
245:' 1 '' 4 '' 16 '' 32 '' 64 '' 128 ',
246:' 2 '' 4 '' 16 '' 32 '' 64 '' 128 ',
247:' 1 '' 2 '' 4 '' 16 '' 32 '' 64 '' 128 ',
248:' 8 '' 16 '' 32 '' 64 '' 128 ',
249:' 1 '' 8 '' 16 '' 32 '' 64 '' 128 ',
250:' 2 '' 8 '' 16 '' 32 '' 64 '' 128 ',
251:' 1 '' 2 '' 8 '' 16 '' 32 '' 64 '' 128 ',
252:' 4 '' 8 '' 16 '' 32 '' 64 '' 128 ',
253:' 1 '' 4 '' 8 '' 16 '' 32 '' 64 '' 128 ',
254:' 2 '' 4 '' 8 '' 16 '' 32 '' 64 '' 128 ',
255:' 1 '' 2 '' 4 '' 8 '' 16 '' 32 '' 64 '' 128 ',
256:'not primary',
512:'low quality',
1024:'PCR or optical duplicates'};

    return TABLE[bit].split()

def str_flag(f):
    """
    convert bit to string
    """
    flag = \
{1:     "paired read",
2:      "proper pair",
4:        "query unmapped",
8:        "mate unmapped",
16:       "strand of the query (1 -> reverse)",
32:       "strand of the mate",
64:        "first read in pair",
128:        "second read in pair",
256:        "alignment is not primary",
512:        "does not pass quality check",
1024:       " PCR or optical duplicate",
}
    return flag[f]

flag2table(sam)
